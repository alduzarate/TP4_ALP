Queremos ver que State es una mónada. Por lo tanto, queremos verificar
las siguientes 3 propiedades:
1) return x >>= f   =   f x
2) t >>= return     =   t
3) (t >>= f) >>= g  =  t >>= (λx. f x >>= g)

Tenemos que:

newtype State a = State {runState :: Env → Pair a Env}

y que

return x = State (\s -> (x :!: s))

m >>= f = State (\s -> let (v :!: s') = runState m s in runState (f v) s')

Probemos 1)

return x >>= f

<==> def. >>=

State (λs → let (v :! : s') = runState (return x) s
            in runState (f v) s')

<==> def. return

State (λs → let (v :! : s') = runState ((State (\s -> (x :!: s))) s)
            in runState (f v) s')

<==> def. runState

State (λs → let (v :! : s') = \s -> (x :!: s)
            in runState (f v) s')

<==> def. let
State (\s -> runState (f x) s)

<==> def. mónada State XD

f x

∎

Probemos 2):

t >>= return

<==> def. >>=

State (\s ->  let (v :!: s') = runState t s 
              in runState (return v) s')

<==> def. return

State (\s ->  let (v :!: s') = runState t s 
              in runState State (\s -> (v :!: s)) s')

<==> def. runState

State (\s ->  let (v :!: s') = runState t s 
              in (v :!: s')

<==> def. let

State (\s -> runState t s)

<==> def. mónada State XD

t

∎

Por último, probemos 3): (t >>= f) >>= g  ===  t >>= (λx. f x >>= g)

(t >>= f) >>= g

<==> def. >>=

(State (\s -> let (v :!: s') = runState m s 
              in runState (f v) s')) >>= g